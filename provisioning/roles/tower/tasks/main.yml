---
- name: check if we need to do installer things
  uri:
    url: https://localhost/api/v2/ping/
    method: GET
    user: admin
    password: "{{ towerpass }}"
    validate_certs: False
    force_basic_auth: yes
  register: checkout
  ignore_errors: True

- name: set condtional if the above didn't error
  set_fact:
    towerchk: "{{ checkout.json.version }}"
  when: checkout.json is defined

- name: download tower installer
  get_url:
    url: https://releases.ansible.com/ansible-tower/setup/ansible-tower-setup-{{ towerversion }}.tar.gz
    dest: /tmp/ansible-tower-setup-{{ towerversion }}.tar.gz
    mode: 0640
  when: towerchk != towerapiversion

- name: extract installer
  unarchive:
    src: /tmp/ansible-tower-setup-{{ towerversion }}.tar.gz
    dest: /tmp/
    remote_src: True
  when: towerchk != towerapiversion

- name: template inventory file
  template:
    src: inventory
    dest: /tmp/ansible-tower-setup-{{ towerversion }}/inventory
  when: towerchk != towerapiversion

- name: run the tower installer
  shell: ./setup.sh chdir=/tmp/ansible-tower-setup-{{ towerversion }}
  when: towerchk != towerapiversion

- name: wait for tower to be up
  uri:
    url: https://localhost/api/v2/ping/
    method: GET
    user: admin
    password: "{{ towerpass }}"
    validate_certs: False
    force_basic_auth: yes
  register: check2
  until: check2.json is defined and check2.json.version == towerapiversion
  retries: 10
  delay: 30
  when: towerchk != towerapiversion

- name: Post license key
  uri:
    url: https://localhost/api/v2/config/
    method: POST
    user: admin
    password: "{{ towerpass }}"
    body: "{{ lookup('file','files/tower_license.json') }}"
    body_format: json
    validate_certs: False
    force_basic_auth: yes

- name: create log aggregation config
  uri:
    url: https://localhost/api/v2/settings/logging/
    method: PUT
    user: admin
    password: "{{ towerpass }}"
    body: "{{ lookup('template', 'tower_logging_config.j2') }}"
    body_format: json
    validate_certs: False
    force_basic_auth: yes
    status_code:
      - 200
      - 201
  register: response
  until: response.status == 200 or response.status == 201
  retries: 10
  delay: 30
  changed_when: response.status == 200 or response.status == 201
